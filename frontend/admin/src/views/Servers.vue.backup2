<template>
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow">
      <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">Edge Server & Sensor Management</h1>
            <p class="mt-1 text-sm text-gray-500">Manage and monitor your edge servers and connected sensors</p>
          </div>
          <div class="flex space-x-3">
            <button
              @click="refreshServers"
              :disabled="loading"
              class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              {{ loading ? 'Refreshing...' : 'Refresh' }}
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">

      <!-- System Overview Cards -->
      <div class="grid grid-cols-1 md:grid-cols-5 gap-6 mb-8">
        <!-- Server Cards -->
        <div class="bg-blue-50 overflow-hidden shadow rounded-lg border border-blue-200">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-blue-600 truncate">Total Servers</dt>
                  <dd class="text-lg font-medium text-blue-900">{{ serverStats.total_servers }}</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-green-50 overflow-hidden shadow rounded-lg border border-green-200">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-green-600 truncate">Online Servers</dt>
                  <dd class="text-lg font-medium text-green-900">{{ serverStats.online_servers }}</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-red-50 overflow-hidden shadow rounded-lg border border-red-200">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-red-600 truncate">Offline Servers</dt>
                  <dd class="text-lg font-medium text-red-900">{{ serverStats.offline_servers }}</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-yellow-50 overflow-hidden shadow rounded-lg border border-yellow-200">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM4.828 7l2.586 2.586a2 2 0 002.828 0L12 7H4.828z" />
                </svg>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-yellow-600 truncate">Active Alerts</dt>
                  <dd class="text-lg font-medium text-yellow-900">{{ serverStats.active_alerts }}</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-purple-50 overflow-hidden shadow rounded-lg border border-purple-200">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-purple-600 truncate">Total Sensors</dt>
                  <dd class="text-lg font-medium text-purple-900">{{ serverStats.total_sensors }}</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Additional Metrics Row -->
      <div class="grid grid-cols-1 md:grid-cols-5 gap-6 mb-8">
        <div class="bg-indigo-50 overflow-hidden shadow rounded-lg border border-indigo-200">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-indigo-600 truncate">Cameras Connected</dt>
                  <dd class="text-lg font-medium text-indigo-900">{{ serverStats.cameras_connected }}</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-teal-50 overflow-hidden shadow rounded-lg border border-teal-200">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-teal-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" />
                </svg>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-teal-600 truncate">Sensors Active</dt>
                  <dd class="text-lg font-medium text-teal-900">{{ serverStats.sensors_active }}</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-orange-50 overflow-hidden shadow rounded-lg border border-orange-200">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
                </svg>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-orange-600 truncate">Data Points</dt>
                  <dd class="text-lg font-medium text-orange-900">{{ serverStats.data_points }}</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-pink-50 overflow-hidden shadow rounded-lg border border-pink-200">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-pink-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-pink-600 truncate">Network I/O</dt>
                  <dd class="text-lg font-medium text-pink-900">{{ serverStats.network_io || 0 }} MB/s</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-cyan-50 overflow-hidden shadow rounded-lg border border-cyan-200">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-cyan-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
                </svg>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-cyan-600 truncate">Storage Used</dt>
                  <dd class="text-lg font-medium text-cyan-900">{{ serverStats.storage_used || 0 }}%</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Edge Servers List -->
      <div class="bg-white shadow overflow-hidden sm:rounded-md">
        <div class="px-4 py-5 sm:px-6">
          <h3 class="text-lg leading-6 font-medium text-gray-900">Edge Servers List</h3>
          <p class="mt-1 max-w-2xl text-sm text-gray-500">Manage and monitor your edge servers</p>
        </div>
        <div class="border-t border-gray-200">
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Server Name</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">CPU</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Memory</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cameras</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sensors</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Alerts</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                <tr v-for="server in paginatedServers" :key="server.server_id" class="hover:bg-gray-50">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      <div class="flex-shrink-0 h-10 w-10">
                        <div class="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center">
                          <svg class="h-6 w-6 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01" />
                          </svg>
                        </div>
                      </div>
                      <div class="ml-4">
                        <div class="text-sm font-medium text-gray-900">{{ server.server_name }}</div>
                        <div class="text-sm text-gray-500">ID: {{ server.server_id }}</div>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span :class="getStatusBadgeClass(server.status)" class="inline-flex px-2 py-1 text-xs font-semibold rounded-full">
                      {{ server.status }}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ server.location }}</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    <div v-if="server.cpu_usage !== null" class="flex items-center">
                      <div class="w-16 bg-gray-200 rounded-full h-2 mr-2">
                        <div class="bg-blue-600 h-2 rounded-full" :style="{ width: server.cpu_usage + '%' }"></div>
                      </div>
                      <span class="text-sm">{{ server.cpu_usage }}%</span>
                    </div>
                    <span v-else class="text-gray-400">N/A</span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    <div v-if="server.memory_usage !== null" class="flex items-center">
                      <div class="w-16 bg-gray-200 rounded-full h-2 mr-2">
                        <div class="bg-green-600 h-2 rounded-full" :style="{ width: (server.memory_usage / 8) * 100 + '%' }"></div>
                      </div>
                      <span class="text-sm">{{ server.memory_usage }}GB</span>
                    </div>
                    <span v-else class="text-gray-400">N/A</span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ server.cameras_count }}</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ server.sensors_count }}</td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span v-if="server.alerts_count > 0" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                      {{ server.alerts_count }}
                    </span>
                    <span v-else class="text-gray-400">0</span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button
                      @click="viewServer(server)"
                      class="text-indigo-600 hover:text-indigo-900 bg-indigo-50 hover:bg-indigo-100 px-3 py-1 rounded-md text-sm font-medium transition-colors duration-200"
                    >
                      View
                    </button>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <!-- Pagination -->
      <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
        <div class="flex-1 flex justify-between sm:hidden">
          <button
            @click="currentPage = Math.max(1, currentPage - 1)"
            :disabled="currentPage === 1"
            class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Previous
          </button>
          <button
            @click="currentPage = Math.min(totalPages, currentPage + 1)"
            :disabled="currentPage === totalPages"
            class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Next
          </button>
        </div>
        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
          <div>
            <p class="text-sm text-gray-700">
              Showing
              <span class="font-medium">{{ (currentPage - 1) * itemsPerPage + 1 }}</span>
              to
              <span class="font-medium">{{ Math.min(currentPage * itemsPerPage, servers.length) }}</span>
              of
              <span class="font-medium">{{ servers.length }}</span>
              results
            </p>
          </div>
          <div>
            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
              <button
                @click="currentPage = Math.max(1, currentPage - 1)"
                :disabled="currentPage === 1"
                class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <span class="sr-only">Previous</span>
                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
              </button>
              <button
                v-for="page in visiblePages"
                :key="page"
                @click="currentPage = page"
                :class="page === currentPage ? 'z-10 bg-indigo-50 border-indigo-500 text-indigo-600' : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'"
                class="relative inline-flex items-center px-4 py-2 border text-sm font-medium"
              >
                {{ page }}
              </button>
              <button
                @click="currentPage = Math.min(totalPages, currentPage + 1)"
                :disabled="currentPage === totalPages"
                class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <span class="sr-only">Next</span>
                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
              </button>
            </nav>
          </div>
        </div>
      </div>
    </div>

    <!-- Server Details Modal -->
    <div v-if="showServerDetails" class="fixed inset-0 z-50 overflow-y-auto">
      <div class="flex min-h-full items-center justify-center p-4">
        <div class="fixed inset-0 bg-black bg-opacity-50" @click="closeServerDetails"></div>
        <div class="relative w-full max-w-6xl transform overflow-hidden rounded-xl bg-white shadow-xl">
          <!-- Modal Header -->
          <div class="flex items-center justify-between border-b border-gray-200 px-6 py-4">
            <h3 class="text-xl font-semibold text-gray-900">SERVER DETAILS: {{ selectedServer?.server_name }}</h3>
            <button @click="closeServerDetails" class="text-gray-400 hover:text-gray-600">
              <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          <!-- Modal Content -->
          <div class="px-6 py-6">
            <!-- Real-time Metrics -->
            <div class="mb-8">
              <h4 class="text-lg font-medium text-gray-900 mb-4">Real-time Metrics</h4>
              <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div class="bg-blue-50 p-4 rounded-lg">
                  <div class="flex items-center justify-between">
                    <div>
                      <p class="text-sm font-medium text-blue-600">CPU Usage</p>
                      <p class="text-2xl font-bold text-blue-900">{{ selectedServer?.cpu_usage || 0 }}%</p>
                    </div>
                    <div class="w-16 bg-blue-200 rounded-full h-2">
                      <div class="bg-blue-600 h-2 rounded-full" :style="{ width: (selectedServer?.cpu_usage || 0) + '%' }"></div>
                    </div>
                  </div>
                </div>
                <div class="bg-green-50 p-4 rounded-lg">
                  <div class="flex items-center justify-between">
                    <div>
                      <p class="text-sm font-medium text-green-600">Memory Usage</p>
                      <p class="text-2xl font-bold text-green-900">{{ selectedServer?.memory_usage || 0 }}GB</p>
                    </div>
                    <div class="w-16 bg-green-200 rounded-full h-2">
                      <div class="bg-green-600 h-2 rounded-full" :style="{ width: ((selectedServer?.memory_usage || 0) / 8) * 100 + '%' }"></div>
                    </div>
                  </div>
                </div>
                <div class="bg-purple-50 p-4 rounded-lg">
                  <div class="flex items-center justify-between">
                    <div>
                      <p class="text-sm font-medium text-purple-600">Network I/O</p>
                      <p class="text-2xl font-bold text-purple-900">{{ selectedServer?.network_io || 0 }}MB/s</p>
                    </div>
                    <div class="w-16 bg-purple-200 rounded-full h-2">
                      <div class="bg-purple-600 h-2 rounded-full" :style="{ width: Math.min(((selectedServer?.network_io || 0) / 100) * 100, 100) + '%' }"></div>
                    </div>
                  </div>
                </div>
                <div class="bg-orange-50 p-4 rounded-lg">
                  <div class="flex items-center justify-between">
                    <div>
                      <p class="text-sm font-medium text-orange-600">Disk Usage</p>
                      <p class="text-2xl font-bold text-orange-900">{{ selectedServer?.disk_usage || 0 }}%</p>
                    </div>
                    <div class="w-16 bg-orange-200 rounded-full h-2">
                      <div class="bg-orange-600 h-2 rounded-full" :style="{ width: (selectedServer?.disk_usage || 0) + '%' }"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Cameras and Sensors Tables -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <!-- Cameras Table -->
              <div>
                <div class="flex items-center justify-between mb-4">
                  <h4 class="text-lg font-medium text-gray-900">Cameras</h4>
                  <button
                    @click="openAddCameraModal"
                    class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    Add Camera
                  </button>
                </div>
                <div class="bg-white shadow overflow-hidden sm:rounded-md">
                  <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                      <thead class="bg-gray-50">
                        <tr>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Camera ID</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Resolution</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">FPS</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IP Address</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Alerts</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                      </thead>
                      <tbody class="bg-white divide-y divide-gray-200">
                        <tr v-for="camera in selectedServer?.cameras || []" :key="camera.id">
                          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{{ camera.name }}</td>
                          <td class="px-6 py-4 whitespace-nowrap">
                            <span :class="getStatusBadgeClass(camera.status)" class="inline-flex px-2 py-1 text-xs font-semibold rounded-full">
                              {{ camera.status }}
                            </span>
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ camera.resolution }}</td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ camera.fps }}</td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ camera.ip_address }}</td>
                          <td class="px-6 py-4 whitespace-nowrap">
                            <span v-if="camera.alerts > 0" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                              {{ camera.alerts }}
                            </span>
                            <span v-else class="text-gray-400">0</span>
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <a href="#" class="text-indigo-600 hover:text-indigo-900">View Settings</a>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>

              <!-- Sensors Table -->
              <div>
                <div class="flex items-center justify-between mb-4">
                  <h4 class="text-lg font-medium text-gray-900">Sensors</h4>
                  <button
                    @click="openAddSensorModal"
                    class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                  >
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    Add Sensor
                  </button>
                </div>
                <div class="bg-white shadow overflow-hidden sm:rounded-md">
                  <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                      <thead class="bg-gray-50">
                        <tr>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sensor ID</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Value</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Update</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Alerts</th>
                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                      </thead>
                      <tbody class="bg-white divide-y divide-gray-200">
                        <tr v-for="sensor in selectedServer?.sensors || []" :key="sensor.id">
                          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{{ sensor.name }}</td>
                          <td class="px-6 py-4 whitespace-nowrap">
                            <span :class="getStatusBadgeClass(sensor.status)" class="inline-flex px-2 py-1 text-xs font-semibold rounded-full">
                              {{ sensor.status }}
                            </span>
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ sensor.type }}</td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ sensor.value }} {{ sensor.unit }}</td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ sensor.location }}</td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ formatDate(sensor.last_update) }}</td>
                          <td class="px-6 py-4 whitespace-nowrap">
                            <span v-if="sensor.alerts > 0" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                              {{ sensor.alerts }}
                            </span>
                            <span v-else class="text-gray-400">0</span>
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <a href="#" class="text-indigo-600 hover:text-indigo-900">View Settings</a>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>

            <!-- Recent Alerts & Events -->
            <div class="mt-8">
              <h4 class="text-lg font-medium text-gray-900 mb-4">Recent Alerts & Events</h4>
              <div class="bg-white shadow overflow-hidden sm:rounded-md">
                <ul class="divide-y divide-gray-200">
                  <li v-for="event in selectedServer?.events || []" :key="event.id" class="px-6 py-4">
                    <div class="flex items-center">
                      <div :class="getEventIconClass(event.type)" class="flex-shrink-0 h-2 w-2 rounded-full"></div>
                      <div class="ml-3 flex-1">
                        <p class="text-sm text-gray-900">{{ event.message }}</p>
                        <p class="text-xs text-gray-500">{{ formatDate(event.timestamp) }}</p>
                      </div>
                    </div>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add Camera Modal -->
    <AddCameraModal
      :isOpen="showAddCameraModal"
      :edgeServerName="selectedServer?.server_name || 'Edge-Server-01'"
      @close="closeAddCameraModal"
      @cameraRegistered="handleCameraRegistered"
    />

    <!-- Add Sensor Modal -->
    <AddSensorModal
      :isOpen="showAddSensorModal"
      :edgeServerName="selectedServer?.server_name || 'Edge-Server-01'"
      @close="closeAddSensorModal"
      @sensorRegistered="handleSensorRegistered"
    />
  </div>
</template>

<script>
import { ref, computed, onMounted } from 'vue'
import { useToast } from 'vue-toastification'
import AddCameraModal from '../components/AddCameraModal.vue'
import AddSensorModal from '../components/AddSensorModal.vue'

export default {
  name: 'Servers',
  components: {
    AddCameraModal,
    AddSensorModal
  },
  setup() {
    const toast = useToast()
    
    // Reactive data
    const loading = ref(false)
    const servers = ref([])
    const currentPage = ref(1)
    const itemsPerPage = ref(10)
    
    // Modal states
    const showServerDetails = ref(false)
    const showAddCameraModal = ref(false)
    const showAddSensorModal = ref(false)
    const selectedServer = ref(null)
    
    // Server statistics
    const serverStats = ref({
      total_servers: 0,
      online_servers: 0,
      offline_servers: 0,
      active_alerts: 0,
      total_sensors: 0,
      online_sensors: 0,
      offline_sensors: 0,
      cameras_connected: 0,
      sensors_active: 0,
      data_points: 0
    })
    
    // Computed properties
    const totalPages = computed(() => {
      return Math.ceil(servers.value.length / itemsPerPage.value)
    })
    
    const paginatedServers = computed(() => {
      const start = (currentPage.value - 1) * itemsPerPage.value
      const end = start + itemsPerPage.value
      return servers.value.slice(start, end)
    })
    
    const visiblePages = computed(() => {
      const pages = []
      const start = Math.max(1, currentPage.value - 2)
      const end = Math.min(totalPages.value, currentPage.value + 2)
      
      for (let i = start; i <= end; i++) {
        pages.push(i)
      }
      return pages
    })
    
    // Methods
    const loadServers = async () => {
      loading.value = true
      try {
        // Mock data for now - replace with actual API call
        const mockServers = [
          {
            server_id: 'server-001',
            server_name: 'Edge-Server-01',
            status: 'online',
            location: 'Site-A',
            cpu_usage: 45,
            memory_usage: 2.1,
            cameras_count: 8,
            sensors_count: 12,
            alerts_count: 0,
            network_io: 15,
            disk_usage: 65,
            cameras: [
              { id: 1, name: 'Camera-01', status: 'online', resolution: '1920x1080', fps: 30, ip_address: '192.168.1.101', alerts: 0 },
              { id: 2, name: 'Camera-02', status: 'online', resolution: '1920x1080', fps: 30, ip_address: '192.168.1.102', alerts: 1 },
              { id: 3, name: 'Camera-03', status: 'offline', resolution: '--', fps: '--', ip_address: '192.168.1.103', alerts: 3 }
            ],
            sensors: [
              { id: 1, name: 'TEMP-001', type: 'Temperature', status: 'online', value: '23.5', unit: '°C', location: 'Server Room', last_update: new Date(), alerts: 0 },
              { id: 2, name: 'HUMID-002', type: 'Humidity', status: 'online', value: '65', unit: '%', location: 'Server Room', last_update: new Date(Date.now() - 300000), alerts: 0 },
              { id: 3, name: 'MOTION-003', type: 'Motion', status: 'online', value: 'Active', unit: '', location: 'Hallway', last_update: new Date(Date.now() - 600000), alerts: 1 },
              { id: 4, name: 'DOOR-001', type: 'Door', status: 'offline', value: 'Closed', unit: '', location: 'Main Entrance', last_update: new Date(Date.now() - 900000), alerts: 0 }
            ],
            events: [
              { id: 1, type: 'info', message: 'Server started successfully', timestamp: new Date() },
              { id: 2, type: 'warning', message: 'High CPU usage detected (89%)', timestamp: new Date(Date.now() - 300000) },
              { id: 3, type: 'error', message: 'Camera-03 connection lost', timestamp: new Date(Date.now() - 600000) }
            ]
          },
          {
            server_id: 'server-002',
            server_name: 'Edge-Server-02',
            status: 'online',
            location: 'Site-B',
            cpu_usage: 67,
            memory_usage: 3.2,
            cameras_count: 5,
            sensors_count: 8,
            alerts_count: 1,
            network_io: 22,
            disk_usage: 78,
            cameras: [],
            sensors: [],
            events: []
          },
          {
            server_id: 'server-003',
            server_name: 'Edge-Server-03',
            status: 'offline',
            location: 'Site-C',
            cpu_usage: null,
            memory_usage: null,
            cameras_count: 0,
            sensors_count: 0,
            alerts_count: 3,
            network_io: 0,
            disk_usage: 0,
            cameras: [],
            sensors: [],
            events: []
          }
        ]
        
        servers.value = mockServers
        updateServerStats()
      } catch (error) {
        console.error('Error loading servers:', error)
        toast.error('Failed to load servers')
      } finally {
        loading.value = false
      }
    }
    
    const updateServerStats = () => {
      serverStats.value = {
        total_servers: servers.value.length,
        online_servers: servers.value.filter(s => s.status === 'online').length,
        offline_servers: servers.value.filter(s => s.status === 'offline').length,
        active_alerts: servers.value.reduce((sum, s) => sum + (s.alerts_count || 0), 0),
        total_sensors: servers.value.reduce((sum, s) => sum + (s.sensors_count || 0), 0),
        online_sensors: 42, // Mock data
        offline_sensors: 5, // Mock data
        cameras_connected: servers.value.reduce((sum, s) => sum + (s.cameras_count || 0), 0),
        sensors_active: 38, // Mock data
        data_points: 1247 // Mock data
      }
    }
    
    const refreshServers = async () => {
      await loadServers()
      toast.success('Servers refreshed successfully')
    }
    
    const getStatusBadgeClass = (status) => {
      const classes = {
        'online': 'bg-green-100 text-green-800',
        'offline': 'bg-red-100 text-red-800',
        'warning': 'bg-yellow-100 text-yellow-800',
        'active': 'bg-green-100 text-green-800',
        'inactive': 'bg-gray-100 text-gray-800'
      }
      return classes[status] || 'bg-gray-100 text-gray-800'
    }
    
    const getEventIconClass = (type) => {
      const classes = {
        'info': 'bg-blue-500',
        'warning': 'bg-yellow-500',
        'error': 'bg-red-500',
        'success': 'bg-green-500'
      }
      return classes[type] || 'bg-gray-500'
    }
    
    const formatDate = (dateString) => {
      if (!dateString) return 'N/A'
      return new Date(dateString).toLocaleString('en-IN', {
        timeZone: 'Asia/Kolkata',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      })
    }
    
    const viewServer = (server) => {
      selectedServer.value = server
      showServerDetails.value = true
    }
    
    const closeServerDetails = () => {
      showServerDetails.value = false
      selectedServer.value = null
    }
    
    // Modal handlers
    const openAddCameraModal = () => {
      showAddCameraModal.value = true
    }
    
    const closeAddCameraModal = () => {
      showAddCameraModal.value = false
    }
    
    const openAddSensorModal = () => {
      showAddSensorModal.value = true
    }
    
    const closeAddSensorModal = () => {
      showAddSensorModal.value = false
    }
    
    const handleCameraRegistered = (cameraData) => {
      toast.success('Camera registered successfully!')
      // Add camera to selected server's cameras array
      if (selectedServer.value) {
        selectedServer.value.cameras.push({
          id: Date.now(),
          name: cameraData.cameraName,
          status: 'offline',
          resolution: cameraData.resolution || '--',
          fps: cameraData.fps || '--',
          ip_address: cameraData.ipAddress,
          alerts: 0
        })
        selectedServer.value.cameras_count++
      }
    }
    
    const handleSensorRegistered = (sensorData) => {
      toast.success('Sensor registered successfully!')
      // Add sensor to selected server's sensors array
      if (selectedServer.value) {
        selectedServer.value.sensors.push({
          id: Date.now(),
          name: sensorData.sensorName,
          type: sensorData.sensorType,
          status: 'offline',
          value: '--',
          unit: sensorData.unit || '',
          location: sensorData.location,
          last_update: new Date(),
          alerts: 0
        })
        selectedServer.value.sensors_count++
      }
    }
    
    // Lifecycle
    onMounted(() => {
      loadServers()
    })
    
    return {
      loading,
      servers,
      currentPage,
      itemsPerPage,
      showServerDetails,
      showAddCameraModal,
      showAddSensorModal,
      selectedServer,
      serverStats,
      totalPages,
      paginatedServers,
      visiblePages,
      loadServers,
      refreshServers,
      getStatusBadgeClass,
      getEventIconClass,
      formatDate,
      viewServer,
      closeServerDetails,
      openAddCameraModal,
      closeAddCameraModal,
      openAddSensorModal,
      closeAddSensorModal,
      handleCameraRegistered,
      handleSensorRegistered
    }
  }
}
</script>
